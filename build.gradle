plugins {
    id 'application'
    id 'java'
    id "org.openjfx.javafxplugin" version "0.1.0"
    id 'jacoco'
    id 'checkstyle' // Add the Checkstyle plugin
}

archivesBaseName = 'seng201_team0'
group = 'seng201.team0'
version = '1.0-SNAPSHOT'
mainClassName = 'seng201.team0.App'

def javaVersion = '17'
def javafxVersion = '21.0.2'

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.openjfx:javafx-controls:${javafxVersion}"
    implementation "org.openjfx:javafx-fxml:${javafxVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation "org.mockito:mockito-core:4.0.0"
}

application {
    mainClass = "${mainClassName}"
}

javafx {
    version = "${javafxVersion}"
    modules = [ 'javafx.controls', 'javafx.fxml']
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Jacoco test coverage config
jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    executionData fileTree(project.rootDir) {
        include '**/*.exec'
    }
    reports {
        html.outputLocation = file("${buildDir}/reports/tests/coverage/")
    }
}

// Checkstyle configuration
checkstyle {
    toolVersion = '9.3'
    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false) // disable XML report
        html.required.set(true)  // enable HTML report
    }
}

check.dependsOn checkstyleMain
